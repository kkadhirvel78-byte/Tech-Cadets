# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ap7STVCvEAHQ7jyoI8giV3GofUKcE8ba
"""

# üì¶ Install required packages (if not already installed)
# !pip install requests gradio

import requests
import gradio as gr

# üîê API Setup (use your actual API key and endpoint)
# NOTE: The API key and endpoint here are placeholders.
# The program will not work with the API unless you replace them with valid credentials.
API_KEY = "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"  # Replace with actual key
API_ENDPOINT = "https://api.convinty.com/v1/finance-advice"  # Replace if needed

# üß† Local Fallback Advice
def local_financial_advice(income, expenses, goal):
    savings = income - expenses
    advice = f"Income: ${income}, Expenses: ${expenses}, Estimated Savings: ${savings}\n\n"

    if goal == "savings":
        if savings < 5000:
            advice += "‚ö†Ô∏è You are saving less than optimal. Consider cutting discretionary expenses."
        else:
            advice += "‚úÖ Great! You're saving well. Consider investing some of it for long-term growth."

    elif goal == "tax":
        if income > 50000:
            tax = income * 0.2
        else:
            tax = income * 0.1
        advice += f"üßæ Estimated Tax: ${tax:.2f}. Consider tax-saving instruments like retirement accounts."

    elif goal == "investment":
        advice += "üìà Consider diversified index funds, ETFs, or fixed-income options for safer long-term growth."

    return advice

# üîÅ Get Advice from API or Fallback
def get_financial_advice(income, expenses, goal):
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "income": income,
        "expenses": expenses,
        "goal": goal
    }

    try:
        # The most common issue is an invalid API key or endpoint,
        # which this code gracefully handles by using the local fallback.
        response = requests.post(API_ENDPOINT, headers=headers, json=payload)
        if response.status_code == 200:
            result = response.json()
            return f"ü§ñ API Advice:\n{result.get('advice', 'No detailed advice returned.')}"
        else:
            # This branch is executed if the API call returns an error status code.
            return f"‚ö†Ô∏è API Error {response.status_code}. Showing local advice:\n\n" + \
                   local_financial_advice(income, expenses, goal)
    except Exception as e:
        # This branch is executed if there's a network error or a problem connecting to the API.
        # The program will not crash and will use the local fallback.
        return f"‚ö†Ô∏è Could not reach API. Showing local advice:\n\n" + \
               local_financial_advice(income, expenses, goal)

# üéõÔ∏è Gradio UI
def chatbot_interface(income, expenses, goal):
    return get_financial_advice(income, expenses, goal)

gr.Interface(
    fn=chatbot_interface,
    inputs=[
        gr.Number(label="üí∞ Annual Income (USD)"),
        gr.Number(label="üí∏ Annual Expenses (USD)"),
        gr.Dropdown(["savings", "tax", "investment"], label="üéØ Financial Goal")
    ],
    outputs="text",
    title="üí¨ Personal Finance Chatbot",
    description="Get smart guidance on savings, taxes, and investments. Uses API (Convinty or similar) with fallback."
).launch()